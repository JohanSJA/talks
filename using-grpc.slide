Using gRPC to build Microservices
20 Oct 2015

Johan Sim Jian An
Software Engineer, ZUMATA
johan.sim@zumata.com
johansja@gmail.com
@johansja


* Introduction


* What is RPC?

.caption A remote procedure call (RPC) is an inter-process communication that allows a computer program to cause a subroutine or procedure to execute in another address space (commonly on another computer on a shared network) without the programmer explicitly coding the details for this remote interaction. [[https://en.wikipedia.org/wiki/Remote_procedure_call][Wikipedia]]

Popular implementation:

- XML-RPC
- SOAP


* What is gRPC?

gRPC stands for gRPC Remote Procedure Call. Essential speaking, Google's
implementation of RPC which currently consists of:

- HTTP/2
- Protocol Buffers 3

.image images/grpc-concept.png _ 600


* What is Microservices?

.image images/microservices.png _ 800


* gRPC Overview


* Projects

Three main projects

- [[https://github.com/grpc/grpc][grpc]]: The C based gRPC (C++, Node.js, Python, Ruby, Objective-C, PHP, C#)
- [[https://github.com/grpc/grpc-go][gprc-go]]: The Go language implementation of gRPC. HTTP/2 based RPC
- [[https://github.com/grpc/grpc-java][grpc-java]]: The Java gRPC implementation. HTTP/2 based RPC

Developed closely by Google together with Square.

Licensed in [[http://opensource.org/licenses/BSD-3-Clause][3-clause BSD]].


* Why gRPC?

- Low latency, highly scalable, distributed system.
- Developing mobile clients which are communicating to a cloud server.
- Designing a new protocol that needs to be accurate, efficient and language independent.
- Layered design to enable extension eg. authentication, load balancing, logging and monitoring etc.

Taken from [[http://www.grpc.io/faq/][gRPC FAQ]].


* Why HTTP/2?

- Is binary, instead of textual.
- Is fully multiplexed, instead of ordered and blocking.
- Can therefore use one connection for parallelism.
- Use header compression to reduce overhead.
- Allow servers to "push" responses proactively into client caches.

Taken from [[https://http2.github.io/faq/#what-are-the-key-differences-to-http1x][HTTP/2 FAQ]].


* Why Protocol Buffer 3?

Advantages over XML:

- Are simpler.
- Are 3 to 10 times smaller.
- Are 20 to 100 times faster.
- Are less ambiguous.
- Generate data access classes that are easier to use programmatically.



* Let's start


* Defining IDL

Interface Definition Language (IDL) is essentially the contract/standard between client and server. This IDL can then be used to generate code.

In gRPC, the IDL is written in Protocol Buffers 3.

- Interoperability between proto3 and JSON. [[https://developers.google.com/protocol-buffers/docs/proto3#json][See this]]
- Strict UTF-8 checking for string.


* Defining IDL (cont.)

.code lyricplayer/player.proto /START PROTO OMIT/,/END PROTO OMIT/


* Generating codes

Install these first:

- proto3 (Install from source)
- github.com/golang/protobuf/protoc-gen-go (go get)

Using the IDL, we can then generate the client and server stub.

  $ protoc --go_out=plugins=grpc:. player.proto

Stick that command into one Go file and use Go generate.

.code lyricplayer/player.go

  $ go generate


* Write the server

A server interface has been generated.

.code lyricplayer/player2.pb.go /^type PlayerServer/,/^}/


* Write the server (cont.)

Write an implementation that satisfies the interface.

.code lyricplayer/server/server.go /^type Player/,/^}/


* Write the server (cont.)

Simple RPC

.code lyricplayer/server/server.go /^func \(p \*Player\) GetTime/,/^}/


* Write the server (cont.)

Server streaming

.code lyricplayer/server/server.go /^func \(p \*Player\) GetLyric/,/^}/


* Use the client

A client stub has been generated.

.code lyricplayer/player2.pb.go /^type playerClient/,/^}/
.code lyricplayer/player2.pb.go /^func NewPlayerClient/,/^}/


* Use the client (cont.)

Establish a connection and call the related functions.

.code lyricplayer/client/client.go /START CONNECT OMIT/,/END CONNECT OMIT/


* Use the client (cont.)

Simple RPC

.code lyricplayer/client/client.go /START GETTIME OMIT/,/END GETTIME OMIT/


* Use the client (cont.)

Server streaming

.code lyricplayer/client/client.go /START GETLYRIC OMIT/,/END GETLYRIC OMIT/


* Other small things


* gRPC Return Code

A set of errors that are more directly applicable to API uses cases than the HTTP status codes.

OK, Canceled, Unknown, InvalidArgument, DeadlineExceeded, NotFound, AlreadyExists, PermissionDenied, Unauthenticated, ResourceExhausted, FailedPrecondition, Aborted, OutofRange, Unimplemented, Internal, Unavailable, DataLoss

Check out [[https://godoc.org/google.golang.org/grpc/codes#Code][the definition]].


* Inter-services testing

Write a dummy client that satisy the following generated interface for testing.

.code lyricplayer/player2.pb.go /^type PlayerClient/,/^}/


* RESTful JSON API to gRPC

There is a plugin for protoc named [[https://github.com/gengo/grpc-gateway][grpc-gateway]] which generates a reverse-proxy for that.

.code lyricplayer/player2.proto /START PROTO OMIT/,/END PROTO OMIT/

Translation between REST to gRPC is documented in [[https://github.com/google/googleapis/blob/master/google/api/http.proto][this proto file]].


* Health check

Standardize health check service as discussed on [[https://github.com/grpc/grpc/blob/master/doc/health-checking.md][doc]].

.code health/grpc_health_v1alpha/health.proto


* Health check (cont.)

Implemented server in [[google.golang.org/grpc/health][Go]].

.code health/health.go /^func \(s \*HealthServer\) Check/,/^}/


* Health check (cont.)

Ready to use client [[google.golang.org/grpc/health/grpc_health_v1alpha][available]].

.code health/grpc_health_v1alpha/health.pb.go /^type HealthClient/,/^}/
.code health/grpc_health_v1alpha/health.pb.go /^func NewHealthClient/,/^}/


* Tracing

gRPC logs all connections and events using `net/trace` package.

.code lyricplayer/server/server.go /START TRACE OMIT/,/END TRACE OMIT/

Looks at the logs at `/debug/requests` and `/debug/events`.


* Using gRPC in Zumata

3 months into gRPC.

Currently used in:

- Accounting service (Server: Ruby, Client: Go)
- Payment service (Server, Client: Go)

Zumata is *hiring*!

Join us if you are interested in Go (and _maybe_ also gRPC).


* Q & A
